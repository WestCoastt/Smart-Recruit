import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import type { ApplicantDetail as ApplicantDetailType } from "../types";
import {
  OverviewTab,
  ChartsTab,
  TechnicalTab,
  PersonalityTab,
  AIReportTab,
  InterviewTab,
} from "../components/ApplicantDetailTabs";

const ApplicantDetail: React.FC = () => {
  const { applicantId } = useParams<{ applicantId: string }>();
  const navigate = useNavigate();
  const [applicant, setApplicant] = useState<ApplicantDetailType | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [activeTab, setActiveTab] = useState("overview");
  const [expandedQuestions, setExpandedQuestions] = useState<Set<number>>(
    new Set()
  );

  const toggleQuestion = (questionIndex: number) => {
    const newExpanded = new Set(expandedQuestions);
    if (newExpanded.has(questionIndex)) {
      newExpanded.delete(questionIndex);
    } else {
      newExpanded.add(questionIndex);
    }
    setExpandedQuestions(newExpanded);
  };

  useEffect(() => {
    fetchApplicantDetail();
  }, [applicantId]);

  const fetchApplicantDetail = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("adminToken");

      if (!token) {
        navigate("/admin/login");
        return;
      }

      const response = await fetch(`/api/admin/applicants/${applicantId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (response.status === 401) {
        localStorage.removeItem("adminToken");
        localStorage.removeItem("adminInfo");
        navigate("/admin/login");
        return;
      }

      const data = await response.json();

      if (data.success) {
        console.log("지원자 데이터:", data.data);
        setApplicant(data.data);
      } else {
        setError(data.message || "지원자 정보를 불러오는데 실패했습니다.");
      }
    } catch (error) {
      console.error("지원자 상세 정보 조회 오류:", error);
      setError("서버 연결에 실패했습니다.");
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("ko-KR", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}분 ${remainingSeconds}초`;
  };

  const getRecommendationColor = (recommendation: string) => {
    switch (recommendation) {
      case "high":
        return "bg-green-100 text-green-800";
      case "medium":
        return "bg-yellow-100 text-yellow-800";
      case "low":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getRecommendationText = (recommendation: string) => {
    switch (recommendation) {
      case "high":
        return "적극 추천";
      case "medium":
        return "보통";
      case "low":
        return "신중 검토";
      default:
        return "미평가";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  if (error || !applicant) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-4">오류 발생</h1>
          <p className="text-gray-600 mb-4">
            {error || "지원자 정보를 찾을 수 없습니다."}
          </p>
          <button
            onClick={() => navigate("/admin/applicants")}
            className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            지원자 목록으로 돌아가기
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 헤더 */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate("/admin/applicants")}
                className="text-indigo-600 hover:text-indigo-800"
              >
                ← 지원자 목록
              </button>
              <h1 className="text-3xl font-bold text-gray-900">
                {applicant.name}
              </h1>
              {applicant.aiReport && (
                <span
                  className={`inline-flex px-3 py-1 text-sm font-semibold rounded-full ${getRecommendationColor(
                    applicant.aiReport.report.overallAssessment.recommendation
                  )}`}
                >
                  {getRecommendationText(
                    applicant.aiReport.report.overallAssessment.recommendation
                  )}
                </span>
              )}
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          {/* 기본 정보 */}
          <div className="bg-white shadow rounded-lg mb-6">
            <div className="px-6 py-4">
              <h2 className="text-lg font-medium text-gray-900 mb-4">
                기본 정보
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <dt className="text-sm font-medium text-gray-500">이름</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {applicant.name}
                  </dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">이메일</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {applicant.email}
                  </dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">연락처</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {applicant.phone}
                  </dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">등록일</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {formatDate(applicant.createdAt)}
                  </dd>
                </div>
                {applicant.technicalTest && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">
                      기술 테스트 완료
                    </dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      {formatDate(applicant.technicalTest.submittedAt)}
                    </dd>
                  </div>
                )}
                {applicant.personalityTest && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">
                      인성 테스트 완료
                    </dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      {formatDate(applicant.personalityTest.submittedAt)}
                    </dd>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* 탭 네비게이션 */}
          <div className="bg-white shadow rounded-lg">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex">
                <button
                  onClick={() => setActiveTab("overview")}
                  className={`py-4 px-6 text-sm font-medium ${
                    activeTab === "overview"
                      ? "border-b-2 border-indigo-500 text-indigo-600"
                      : "text-gray-500 hover:text-gray-700"
                  }`}
                >
                  점수 개요
                </button>
                <button
                  onClick={() => setActiveTab("charts")}
                  className={`py-4 px-6 text-sm font-medium ${
                    activeTab === "charts"
                      ? "border-b-2 border-indigo-500 text-indigo-600"
                      : "text-gray-500 hover:text-gray-700"
                  }`}
                >
                  점수 분석
                </button>
                <button
                  onClick={() => setActiveTab("technical")}
                  className={`py-4 px-6 text-sm font-medium ${
                    activeTab === "technical"
                      ? "border-b-2 border-indigo-500 text-indigo-600"
                      : "text-gray-500 hover:text-gray-700"
                  }`}
                >
                  기술 테스트
                </button>
                <button
                  onClick={() => setActiveTab("personality")}
                  className={`py-4 px-6 text-sm font-medium ${
                    activeTab === "personality"
                      ? "border-b-2 border-indigo-500 text-indigo-600"
                      : "text-gray-500 hover:text-gray-700"
                  }`}
                >
                  인성 테스트
                </button>
                {applicant.aiReport && (
                  <button
                    onClick={() => setActiveTab("ai-report")}
                    className={`py-4 px-6 text-sm font-medium ${
                      activeTab === "ai-report"
                        ? "border-b-2 border-indigo-500 text-indigo-600"
                        : "text-gray-500 hover:text-gray-700"
                    }`}
                  >
                    AI 리포트
                  </button>
                )}
                {applicant.aiReport && (
                  <button
                    onClick={() => setActiveTab("interview")}
                    className={`py-4 px-6 text-sm font-medium ${
                      activeTab === "interview"
                        ? "border-b-2 border-indigo-500 text-indigo-600"
                        : "text-gray-500 hover:text-gray-700"
                    }`}
                  >
                    면접 질문
                  </button>
                )}
              </nav>
            </div>

            <div className="p-6">
              {/* 탭 컨텐츠 */}
              {activeTab === "overview" && (
                <OverviewTab applicant={applicant} formatTime={formatTime} />
              )}

              {activeTab === "charts" && (
                <ChartsTab applicant={applicant} formatTime={formatTime} />
              )}

              {activeTab === "technical" && (
                <TechnicalTab
                  applicant={applicant}
                  expandedQuestions={expandedQuestions}
                  toggleQuestion={toggleQuestion}
                />
              )}

              {activeTab === "personality" && (
                <PersonalityTab
                  applicant={applicant}
                  expandedQuestions={expandedQuestions}
                  toggleQuestion={toggleQuestion}
                />
              )}

              {activeTab === "ai-report" && applicant.aiReport && (
                <AIReportTab applicant={applicant} />
              )}

              {activeTab === "interview" && applicant.aiReport && (
                <InterviewTab applicant={applicant} />
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default ApplicantDetail;
